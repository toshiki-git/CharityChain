const fs = require("fs");
const Web3 = require("web3");

const web3 = new Web3("http://127.0.0.1:7546");

// ABIファイルの読み込み
const contractABI = JSON.parse(fs.readFileSync("./ABI/child.json", "utf8"));

// バイトコードの設定（この例ではハードコードされていますが、外部から読み込むことも可能）
const bytecode =
  "608060405234801561001057600080fd5b5060008081905550610b7f806100276000396000f3fe60806040526004361061004a5760003560e01c806312065fe01461004f57806356224c271461007a578063cd4646cb146100a3578063de2ed893146100cc578063ed88c68e146100f7575b600080fd5b34801561005b57600080fd5b50610064610101565b6040516100719190610756565b60405180910390f35b34801561008657600080fd5b506100a1600480360381019061009c9190610534565b610109565b005b3480156100af57600080fd5b506100ca60048036038101906100c591906104f4565b6102d5565b005b3480156100d857600080fd5b506100e16103c9565b6040516100ee9190610756565b60405180910390f35b6100ff6103cf565b005b600047905090565b600047905060008111610151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014890610696565b60405180910390fd5b6000825111610195576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018c906106f6565b60405180910390fd5b60008251826101a49190610834565b9050600081116101e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e090610736565b60405180910390fd5b60005b83518110156102cf57600084828151811061020a57610209610979565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168360405161023590610681565b60006040518083038185875af1925050503d8060008114610272576040519150601f19603f3d011682016040523d82523d6000602084013e610277565b606091505b50509050806102bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102b2906106b6565b60405180910390fd5b5080806102c7906108d2565b9150506101ec565b50505050565b80471015610318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030f906106d6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161033e90610681565b60006040518083038185875af1925050503d806000811461037b576040519150601f19603f3d011682016040523d82523d6000602084013e610380565b606091505b50509050806103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb906106b6565b60405180910390fd5b505050565b60005481565b60003411610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990610716565b60405180910390fd5b3460008082825461042391906107de565b92505081905550565b600061043f61043a84610796565b610771565b90508083825260208201905082856020860282011115610462576104616109dc565b5b60005b858110156104925781610478888261049c565b845260208401935060208301925050600181019050610465565b5050509392505050565b6000813590506104ab81610b1b565b92915050565b600082601f8301126104c6576104c56109d7565b5b81356104d684826020860161042c565b91505092915050565b6000813590506104ee81610b32565b92915050565b6000806040838503121561050b5761050a6109e6565b5b60006105198582860161049c565b925050602061052a858286016104df565b9150509250929050565b60006020828403121561054a576105496109e6565b5b600082013567ffffffffffffffff811115610568576105676109e1565b5b610574848285016104b1565b91505092915050565b600061058a6016836107cd565b9150610595826109fc565b602082019050919050565b60006105ad6014836107cd565b91506105b882610a25565b602082019050919050565b60006105d06020836107cd565b91506105db82610a4e565b602082019050919050565b60006105f36016836107cd565b91506105fe82610a77565b602082019050919050565b60006106166000836107c2565b915061062182610aa0565b600082019050919050565b6000610639601c836107cd565b915061064482610aa3565b602082019050919050565b600061065c6022836107cd565b915061066782610acc565b604082019050919050565b61067b81610897565b82525050565b600061068c82610609565b9150819050919050565b600060208201905081810360008301526106af8161057d565b9050919050565b600060208201905081810360008301526106cf816105a0565b9050919050565b600060208201905081810360008301526106ef816105c3565b9050919050565b6000602082019050818103600083015261070f816105e6565b9050919050565b6000602082019050818103600083015261072f8161062c565b9050919050565b6000602082019050818103600083015261074f8161064f565b9050919050565b600060208201905061076b6000830184610672565b92915050565b600061077b61078c565b905061078782826108a1565b919050565b6000604051905090565b600067ffffffffffffffff8211156107b1576107b06109a8565b5b602082029050602081019050919050565b600081905092915050565b600082825260208201905092915050565b60006107e982610897565b91506107f483610897565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108295761082861091b565b5b828201905092915050565b600061083f82610897565b915061084a83610897565b92508261085a5761085961094a565b5b828204905092915050565b600061087082610877565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6108aa826109eb565b810181811067ffffffffffffffff821117156108c9576108c86109a8565b5b80604052505050565b60006108dd82610897565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109105761090f61091b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e6f2066756e647320746f206469737472696275746500000000000000000000600082015250565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b7f496e73756666696369656e742062616c616e636520696e20636f6e7472616374600082015250565b7f4e6f20726563697069656e74732070726f766964656400000000000000000000600082015250565b50565b7f446f6e6174696f6e206d757374206265206d6f7265207468616e203000000000600082015250565b7f496e73756666696369656e742062616c616e636520746f20646973747269627560008201527f7465000000000000000000000000000000000000000000000000000000000000602082015250565b610b2481610865565b8114610b2f57600080fd5b50565b610b3b81610897565b8114610b4657600080fd5b5056fea26469706673582212201dd97b497eb045167f072b4593aa985bcb8c6ba85be9c8e17de76aac3d3f8ac564736f6c63430008070033";

// スマートコントラクトをデプロイする関数
async function deployContract(abi, bytecode) {
  const accounts = await web3.eth.getAccounts();
  const deployerAccount = accounts[0]; // デプロイするアカウント

  const contract = new web3.eth.Contract(abi);
  const deploy = contract.deploy({ data: "0x" + bytecode });

  try {
    const receipt = await web3.eth.sendTransaction({
      from: deployerAccount,
      data: deploy.encodeABI(),
      gas: 5000000, // ガス量の設定
    });

    console.log("Contract deployed at address:", receipt.contractAddress);
    return receipt.contractAddress;
  } catch (error) {
    console.error("Deployment failed:", error);
    throw error;
  }
}

deployContract(contractABI, bytecode)
  .then((address) => console.log(`Deployed at: ${address}`))
  .catch(console.error);
